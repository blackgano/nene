
CREATE DATABASE lekcja1
CREATE DATABASE lekcja1;
CREATE TABLE (id_postaci INT PRIMARY KEY,nazwa VARCHAR(40),rodzaj ENUM('wiking','ptak','kobieta'),data_ur DATE,wiek +  INT);
CREATE TABLE (id_postaci INT PRIMARY KEY,nazwa VARCHAR(40),rodzaj ENUM(`wiking`,`ptak`,`kobieta`),data_ur DATE,wiek +  INT);
CREATE TABLE (id_postaci INT PRIMARY KEY AUTO_INCREMENT,nazwa VARCHAR(40),rodzaj ENUM('wiking','ptak','kobieta'),data_ur DATE,wiek  INT UNSIGNED);
CREATE TABLE postac (id_postaci INT PRIMARY KEY AUTO_INCREMENT,nazwa VARCHAR(40),rodzaj ENUM('wiking','ptak','kobieta'),data_ur DATE,wiek  INT UNSIGNED);
DESC postac;
INSTERT INTO `postac` VALUESE (Bjorn,wiking,(10,08,700),20);
INSTERT INTO `postac` VALUESE (Bjorn,wiking,10-08-700,20);
INSTERT INTO `postac` VALUES (Bjorn,wiking,10-08-700,20);
INSERT INTO `postac` VALUES (Bjorn,wiking,10-08-700,20);
INSERT INTO `postac` VALUES (1,Bjorn,wiking,10-08-700,20);
INSERT INTO `postac` VALUES (Bjorn,wiking,10-08-700,20);
INSERT INTO `postac` VALUES (1,Bjorn,wiking,10-08-700,20);
INSERT INTO `postac` VALUES (1,'Bjorn',wiking,10-08-700,20);
INSERT INTO `postac` VALUES (1,'Bjorn','wiking','10-08-700','20');
INSERT INTO `postac` VALUES (1,'Bjorn','wiking','700-08-20','20');
INSERT INTO `postac` VALUES (2,'Drozd','ptak','2018-05-15','5');
INSERT INTO `postac` VALUES (3,'Tesciowa','kobieta','1950-02-2','70');
select * from `postac`;
select data_ur,wiek from postac where  id=3; 
select data_ur,wiek from postac where  id_postaci=3;
update postac set data_ur ='1932-02-02' , wiek='88' where id_postaci = 3;
select data_ur,wiek from postac where  id_postaci=3;
CREATE TABLE walizka (id_walizki PRIMARY KEY AUTO_INCRESMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela  FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int  FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela  FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela  FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int  FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int FOREIGN KEY(id_postaci)REFERENCES postac(id_postaci) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int, FOREIGN KEY(`id_postaci`)REFERENCES postac(`id_postaci`) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int, FOREIGN KEY(id_postaci)REFERENCES postac(id_postaci) ON DELETE CASCADE);
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int, FOREIGN KEY(id_wlasciciela)REFERENCES postac(id_postaci) ON DELETE CASCADE);
Show databases;
use churas
show tables;
ALTER TABLE `walizka` ALTER `kolor` SET DEFAULT 'rozowy';
INSERT INTO `walizka` VALUES (1,20,'czerwony',1);
INSERT INTO `walizka` VALUES (2,15,'zolty',3);
SELECT * FROM `walizka`;
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY,metraz int unsigned,wlasciciel int,FOREIGN KEY id_wlasciciela REFERENCES postac(id_postaci));
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY,metraz int UNSIGNED,wlasciciel int,FOREIGN KEY id_wlasciciel REFERENCES postac(`id_postaci`));
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY,metraz int UNSIGNED,wlasciciel int,FOREIGN KEY wlasciciel REFERENCES postac(id_postaci));
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY,metraz int UNSIGNED,wlasciciel int,FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci));
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY,metraz int UNSIGNED,wlasciciel int,FOREIGN KEY(`wlasciciel`) REFERENCES postac(`id_postaci`));
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY,metraz int UNSIGNED,wlasciciel int,FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci));
CREATE TABLE izba(adres_budynku int Primary KEY,nazwa_izby varchar  PRIMARY KEY, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci));
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci), primary key(adres_budynku, nazwa_izby));
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(`wlasciciel`) REFERENCES postac(`id_postaci`), primary key(adres_budynku, nazwa_izby));
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY (wlasciciel) REFERENCES postac (id_postaci), primary key(adres_budynku, nazwa_izby));
update postac set  wiek =88 where rodzaj='kobieta';
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY (wlasciciel) REFERENCES postac (id_postaci), primary key(adres_budynku, nazwa_izby));
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY (wlasciciel) REFERENCES postac(id_postaci), primary key(adres_budynku, nazwa_izby));
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci), primary key(adres_budynku, nazwa_izby));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ', metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac' at line 1
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar, metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci), primary key(adres_budynku, nazwa_izby));
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar(40), metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci), primary key(adres_budynku, nazwa_izby));
ALTER TABLE izba ADD kolor varchar(20) DEFAULT 'czarny' AFTER metraz;
DESC izba;
INSERT INTO izba VALUES(43,)
\134g
INSERT INTO izba VALUES(43,'spizarnia',25,'niebieski',3);
cat ~/.mysql_history
/g
show status;
quit
USE churas;
ALTER TABLE postac CHANGE 'funckja' 'funkcja' VARCHAR(20);
ALTER TABLE postac RENAME COLUMN 'funckja' TO 'funkcja' ;
DESC postac;
ALTER TABLE postac RENAME COLUMN funckja TO funkcja ;
SELECT * FROM postac;
UPDATE postac SET funkcja='kapitan' WHERE id_postaci=1;
ALTER TABLE postac ADD COLUMN statek VARCHAR(20),FOREIGN KEY (statek) REFERENCES statek(nazwa_statku)  ;
ALTER TABLE postac ADD COLUMN statek VARCHAR(20), ADD FOREIGN KEY (statek) REFERENCES statek(nazwa_statku) ;
UPDATE postac SET statek='drakar' WHERE id_postaci= 1 OR 2 OR 7 OR 8;
UPDATE postac SET statek='drakar' WHERE id_postaci= 1 ;
SET foreign_keeign_key_checks =0;
SET foreign_key_checks =0;
UPDATE postac SET statek='drakar' WHERE id_postaci= 1 OR 2 OR 7 OR 8;
UPDATE postac SET statek='knar' WHERE id_postaci= 4 OR 5 OR 6 ;
SET foreign_key_checks =1;
SELECT * izba;
SELECT * FROM izba;
UPDATE  izba SET wlasciciel= NULL WHERE metraz=25;
DELETE FROM izba WHERE metraz=25;
DROP TABLE izba;
cat ~/.mysql_history
cat ~/.mysql_history;
quit;
USE churas;
SELECT * FROM postac;
DELETE FROM postac WHERE wiek=85 OR 75;
SET foreign_key_checks =0;
DELETE FROM postac WHERE wiek=85 OR 75;
SET foreign_key_checks =1;
SELECT * FROM postac;
SHOW COLUMN FROM postac;
DESC  postac;
SELECT * FROM postac;
SELECT * FROM postac; 1 | Bjorn    | wiking  | 0700-08-20 |   20 | kapitan | knar   |
|          2 | Drozd    | ptak    | 2018-05-15 |    5 | NULL    | knar   |
|          3 | Tesciowa | kobieta | 1932-02-02 |   88 | NULL    | knar   |
|          4 | Olaf     | wiking  | 0812-11-05 |   55 | NULL    | knar   |
|          5 | BROLAF   | wiking  | 0816-01-07 |   51 | NULL    | knar   |
|          6 | Ulfur    | wiking  | 0827-07-26 |   75 | NULL    | knar   |
|          7 | Hydyr    | wiking  | 0810-04-25 |   85 | NULL    | knar   |
INSERT INTO postac VALUES (1,'Bjorn','wiking','700-08-20',20,'kapitan','drakar');
SET foreign_key_checks =0;
SELECT * FROM postac;
INSERT INTO postac VALUES (1,'Bjorn','wiking','700-08-20',20,'kapitan','drakar');
INSERT INTO postac VALUES (2,'Drozd','ptak','720-06-22',5,NULL,'drakar');
INSERT INTO postac VALUES (3,'Tesciowa','kobieta','680-01-12',88,NULL,NULL);
INSERT INTO postac VALUES (4,'Olaf','wiking','720-06-5',65,NULL,'drakar');
INSERT INTO postac VALUES (5,'Brolaf','wiking','715-02-23',45,NULL,'drakar');
INSERT INTO postac VALUES (6,'ULFUR','wiking','725-03-16',35,NULL,'knar');
INSERT INTO postac VALUES (7,'HYDYR','wiking','730-07-6',23,NULL,'knar');
SELECT * FROM postac;
INSERT INTO postac VALUES (8,'Thor','wiking','732-06-26',70,NULL,'knar');
SET foreign_key_checks =1;
SELECT * FROM postac;
SET foreign_key_checks =0;
DELETE FROM postac WHERE id_postac=8 AND id_postac=4;
DELETE FROM postac WHERE id_postaci=8 AND id_postaci=4;
SELECT * FROM postac;
SET foreign_key_checks =1;
SELECT * FROM postac;
DELETE FROM postac WHERE id_postaci=8 AND id_postaci=4;
DELETE FROM postac WHERE id_postaci=8 OR id_postaci=4;
SELECT * FROM postac;
ALTER TABLE postac DROP PRIMARY KEY;
ALTER postac DROP FOREIGN KEY statek;
ALTER TABLE postac DROP FOREIGN KEY statek;
quit
use churas;
show tables;
desc postac;
SELECT * FROM postac;
ALTER TABLE POSTAC DROP PRIMARY KEY id_postaci; 
ALTER TABLE postac DROP PRIMARY KEY id_postaci;
ALTER TABLE postac DROP PRIMARY KEY 'id_postaci';
ALTER TABLE postac DROP PRIMARY KEY;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
ALTER TABLE postac DROP FOREIGN KEY statek;
ALTER TABLE postac DROP FOREIGN KEY 'statekd';
ALTER TABLE postac DROP FOREIGN KEY statek;
show tables;
desc walizka;
ALTER TABLE walizka DROP FOREIGN KEY id_wlasciciela;
desc przetwory;
desc statek;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
Cannot drop index 'PRIMARY': needed in a foreign key constraint
/c
SHOW postac;
SELECT * FROM postac;
ALTER TABLE postac DROP FOREIGN KEY statek;
ALTER TABLE postac DROP FOREIGN KEY `statek`;
ALTER TABLE postac DROP FOREIGN KEY statek;
 Can't DROP 'statek'; check that column/key exists
SHOW postac course;
SHOW CREATE TABLE  course;
SHOW CREATE TABLE  postac;
SHOW tables;
ALTER TABLE postac DROP FOREIGN KEY statek;
ALTER TABLE postac DROP FOREIGN KEY;
ALTER TABLE postac DROP FOREIGN KEY statek;
SHOW tables;
SHOW CREATE TABLE  postac;
ALTER TABLE postac DROP FOREIGN KEY postac_ibfk_1;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
SHOW CREATE TABLE  postac;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
ALTER TABLE postac CHANGE id_postaci id_postaci int,DROP PIMARY KEY;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
SHOW CREATE TABLE  prztwory;
SHOW CREATE TABLE  przetwory;
ALTER TABLE postac DROP FOREIGN KEY prztwory_ibfk_1;
ALTER TABLE postac DROP FOREIGN KEY przetwory_ibfk_1;
ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_1;
ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_2;
ALTER TABLE statek DROP FOREIGN KEY statek_ibfk_1;
SHOW CRATE statek;
SHOW CREATE statek;
SHOW CREATE table statek;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
SHOW tables;
ALTER TABLE walizka DROP FOREIGN KEY walizka_ibfk_1;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
ALTER TABLE postac ADD pesel varchar(11) PRIMARY KEY;
ALTER TABLE postac ADD pesel varchar(11) ,ADD PRIMARY KEY(pesel);
ALTER TABLE postac ADD pesel varchar(11) ;
ALTER TABLE postac ADD PRIMARY KEY (pesel) ;
SELECT * FROM postac;
UPDATE postac SET pesel='35646575312' WHERE id_postaci=1;
UPDATE postac SET pesel='654765453643' WHERE id_postaci=2;
UPDATE postac SET pesel='65476545364' WHERE id_postaci=2;
UPDATE postac SET pesel='65454334523' WHERE id_postaci=3;
UPDATE postac SET pesel='65454336544' WHERE id_postaci=5;
UPDATE postac SET pesel='65454336764' WHERE id_postaci=6;
UPDATE postac SET pesel='65454334577' WHERE id_postaci=7;
ALTER TABLE postac ADD PRIMARY KEY (pesel) ;
DESC postac;
ALTER TABLE postac CHANGE rodzaj rodzaj enum('wiking','ptak','kobieta','syrena');
DESC postac;
ALTER TABLE postac DROP id_postaci;
INSERT INTO postac VALUES('syrena',600-05-01,200,null,null,89057687623);
DESC postac;
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena',600-05-01,200,null,null,89057687623);
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena',700-05-01,200,null,null,89057687623);
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena',700-05-03,200,null,null,89057687623);
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena',800-05-03,200,null,null,89057687623);
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena',1900-05-03,200,null,null,89057687623);
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena',1950-05-03,200,null,null,89057687623);
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena','700-05-03,200',null,null,89057687623);
desc postac;
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena','700-05-03',200,null,null,89057687623);
SELECT * FROM postac;
desc statek;
UPDATE postac SET statek='drakar' WHERE nazwa='%a%';
DESC statek;
UPDATE statek SET max_ladownosc * 0,7;
UPDATE statek SET max_ladownosc= max_ladownosc * 0,7;
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7;
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowanialike '2___%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowanialike 2___%;
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowanialike '2_%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowanialike '2%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowani= '2___%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowania= '2___%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowania= '2%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowania='2%-%-%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowania >='2000-01-1';
use churas;
show databases;
use churas;
show tables;
DESC postac;
SELECT * FROM postac WHERE wiek<1000;
ALTER TABLE ALTER COLUMN rodzaj enum('ptak','waz','wiking','kobieta','syrena');
ALTER TABLE ALTER COLUMN rodzaj rodzaj enum('ptak','waz','wiking','kobieta','syrena');
ALTER TABLE postac ALTER COLUMN rodzaj rodzaj enum('ptak','waz','wiking','kobieta','syrena');
ALTER TABLE postac ALTER COLUMN rodzaj  enum('ptak','waz','wiking','kobieta','syrena');
ALTER TABLE postac MODIFY COLUMN rodzaj  ENUM('ptak','waz','wiking','kobieta','syrena');
DESC postac;
SELECT * FROM postac;
INSTERT INTO postac VALUES('Loko','waz','500-3-2',400,NULL,NULL,43267867512);
INSERT INTO postac VALUES('Loko','waz','500-3-2',400,NULL,NULL,43267867512);
CREATE TABLE Marynarz LIKE postac;
DESC marynarz;
DESC Marynarz;
INSTERT INTO Marynarz SELECT * FROM postac WHERE statek IS NOT NULL;
INSERT INTO Marynarz SELECT * FROM postac WHERE statek IS NOT NULL;
SELECT * FROM Marynarz;
SELECT * FROM Marynarz WHERE statek IS NOT NULL SET statek = NULL;
UPDATE Marynarz SET statek=NULL WHERE statek IS NOT NULL;
SELECT * FROM Marynarz;
DELETE FROM Marynarz WHERE nazwa='Brolaf';
SELECT * FROM Marynarz;
DELETE FROM statek ;
DROP statek;
DROP TABLE statek;
CREATE TABLE zwierz(id INT PRIMARY KEY AUTO_INCREMENT, nazwa VARCHAR(50),wiek INT);
INSERT INTO zwierz SELECT * FROM postac WHERE rodzaj='ptak' OR rodzaj='waz';
INSERT INTO zwierz SELECT nazwa,wiek  FROM postac WHERE rodzaj='ptak' OR rodzaj='waz';
INSERT INTO zwierz(nazwa,wiek) SELECT nazwa,wiek  FROM postac WHERE rodzaj='ptak' OR rodzaj='waz';
SELETCT * FROM zwierz;
SELECT * FROM zwierz;
quit
use churas;
SHOW databases;
USE wikingowie;
SHOW tables;
CREATE TABLE churas(kreatura) LIKE wikingowie(kreatura); 
CREATE TABLE churas.kreatura LIKE wikingowie.kreatura;
INSERT postac.kreatura SELECT * FROM wikingowie.kreatura;
INSERT INTO postac.kreatura SELECT * FROM wikingowie.kreatura;
CREATE TABLE churas.zasob LIKE wikingowie.zasob;
CREATE TABLE churas.ekwipunek LIKE wikingowie.ekwipunek;
INSERT INTO postac.kreatura SELECT * FROM wikingowie.kreatura;
INSERT INTO churas.kreatura SELECT * FROM wikingowie.kreatura;
INSERT INTO churas.zasob SELECT * FROM wikingowie.zasob;
INSERT INTO churas.ekwipunek SELECT * FROM wikingowie.ekwipunek;
USE churas;
SELECT * FROM zasob;
SELECT * FROM zasob WHERE rodzaj=jedzenie;
SELECT * FROM zasob WHERE rodzaj='jedzenie';
SELECT 'idZasobu','ilosc' FROM zasob WHERE kreatura.id=1 OR kreatura.id=3OR kreatura=5;
DESC kreatura;
SELECT 'idZasobu','ilosc' FROM zasob WHERE kreatura.idKreatury=1 OR kreatura.idKreatury=3 OR kreatura.idKreatury=5;
SELECT *FROM kreatura;;
SELECT *FROM kreatura;
DESC ekwipunek;
SELECT 'idZasobu','ilosc' FROM zasob WHERE ekwipunek.idKREATURY in(1,3,5); 
SELECT 'idZasobu','ilosc','id.Kreatury' FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5);
SELECT 'zasob.idZasobu','zasob.ilosc','ekwipunek.idKreatury','ekwipunek.id.Zasobu' FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5);
SELECT 'zasob.idZasobu','zasob.ilosc'FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5);
SELECT 'zasob.idZasobu','zasob.ilosc'FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in=1;
SELECT 'zasob.idZasobu','zasob.ilosc'FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY=1;
SELECT 'zasob.idZasobu','zasob.ilosc' FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY=in(1,3,5) AND ekwipunek.idZasobu=zasob.idZasobu;
SELECT 'zasob.idZasobu','zasob.ilosc' FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5) AND ekwipunek.idZasobu=zasob.idZasobu;
SELECT 'zasob.idZasobu','zasob.ilosc' FROM zasob; 
SELECT zasob.idZasobu,zasob.ilosc FROM zasob;
SELECT zasob.idZasobu,zasob.ilosc FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5) AND ekwipunek.idZasobu=zasob.idZasobu;
SELECT zasob.idZasobu,zasob.ilosc,ekwipunek.idKreatury FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5) AND ekwipunek.idZasobu=zasob.idZasobu;
DESC kreatury;
DESC kreatura;
SELECT * FROM kreatura WHERE udzwig=>50 AND rodzaj IS NOT 'wiedzma';
SELECT * FROM kreatura WHERE udzwig>=50 AND rodzaj IS NOT 'wiedzma';
SELECT * FROM kreatury;
SELECT * FROM kreatura;
SELECT * FROM kreatura WHERE udzwig>=50 AND rodzaj IS NOT ='wiedzma';
SELECT * FROM kreatura WHERE udzwig>=50 AND rodzaj =!'wiedzma';
SELECT * FROM kreatura WHERE udzwig>=50 AND rodzaj <>'wiedzma';
SELECT * FROM kreatury WHERE nazwa LIKE '%or%' AND udzwig BETWEEN 30 AND 70;
SELECT * FROM kreatura WHERE nazwa LIKE '%or%' AND udzwig BETWEEN 30 AND 70;
DESC zasob;
SELECT * FROM zasob;
SELECT * FROM zasob WHERE dataPozyskania IN MONTH(7,8);
SELECT * FROM zasob WHERE dataPozyskania LIKE '%%.9.%%';
SELECT * FROM zasob WHERE dataPozyskania LIKE '%%.08.%%';
SELECT * FROM zasob WHERE dataPozyskania= '%%.08.%%';
SELECT * FROM zasob WHERE dataPozyskania LIKE '%%.08.%%';
SELECT * FROM zasob WHERE month(dataPozyskania)=9; ;
SELECT * FROM zasob WHERE month(dataPozyskania)=9; 
SELECT * FROM zasob WHERE month(dataPozyskania)=7 OR 8;
SELECT * FROM zasob WHERE month(dataPozyskania)=07 OR 08;
SELECT * FROM zasob WHERE month(dataPozyskania)=07 ;
SELECT * FROM zasob WHERE month(dataPozyskania) IN(7,8) ;
SELECT * FROM zasob WHERE rodzaj IS NOT NULL SORT BY ASC;
SELECT * FROM zasob WHERE rodzaj IS NOT NULL ORDER BY ASC;
SELECT * FROM zasob WHERE rodzaj IS NOT NULL ORDER BY waga ASC;
SELECT * FROM kreatura LIMIT 5 ORDER BY dataUr DESC;  
SELECT * FROM kreatura  ORDER BY dataUr DESC; 
SELECT * FROM kreatura  ORDER BY dataUr DESC LIMIT 5;
SELECT * FROM kreatura  ORDER BY dataUr ASC LIMIT 5;
SELECT DISTINCT * FROM zasob; 
SELECT DISTINCT * FROM zasob ORDER BY rodzaj;
SELECT DISTINCT * FROM zasob GROUP BY rodzaj;
SELECT  * FROM zasob GROUP BY rodzaj;
SELECT  * FROM zasob GROUP BY (rodzaj);
SELECT  rodzaj FROM zasob GROUP BY (rodzaj);
SELECT nazwa, GROUP_CONCAT(rodzaj SEPARATOR',') FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa, GROUP_CONCAT(rodzaj SEPARATOR',') FROM kreatura WHERE rodzaj LIKE 'wi%'GROUP BY nazwa;
SELECT nazwa, rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%";
\^C
SELECT nazwa, rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%";
\^C
SELECT nazwa, rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%";;
SELECT nazwa, GROUP_CONCAT(rodzaj SEPARATOR',') FROM kreatura WHERE rodzaj LIKE 'wi%'GROUP BY nazwa;
SELECT nazwa, rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%;;
SELECT nazwa, rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa, GROP_CONCAT(rodzaj) FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa, GROUP_CONCAT(rodzaj) FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT GROUP_CONCAT(nazwa), rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT GROUP_CONCAT(nazwa), rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%' GROUP BY idZasobu;
SELECT idZasobu,GROUP_CONCAT(nazwa), rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%' GROUP BY idZasobu;
SELECT idKreatury,GROUP_CONCAT(nazwa), rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%' GROUP BY idKreatury;
SELECT GROUP_CONCAT(nazwa), rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%' GROUP BY idKreatury;
SELECT nazwa, rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa AS nazwa-rodzaj, rodzaj AS nazwa-rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa AS 'nazwa-rodzaj', rodzaj AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa AS 'nazwa-rodzaj', rodzaj AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%' UNION all;
SELECT nazwa AS 'nazwa-rodzaj'FROM kreatura UNION ALL select rodzaj AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa AS 'nazwa-rodzaj', rodzaj AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT CONCAT(nazwa, rodzaj) FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT CONCAT(nazwa, rodzaj) AS nazwa-rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT CONCAT(nazwa, rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT CONCAT(nazwa,'-' ,rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
quit
USE churas;
SELECT CONCAT(nazwa,'-' ,rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SHOW tables;
DESC zasob;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '01-01-2000' AND '31-12-2007';  
SELECT * FROM zasob;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31'; 
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa AS 'nazwa', ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY waga;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY ilosc;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31';
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31';
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' ORDER BY DESC;
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' ORDER BY dataPozyskania DESC;
DESC zasob;
SELECT nazwa, 0,7 * waga AS 'masa wlasciwego jedzenia', 0,3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie';
SELECT nazwa, 0,7*waga AS 'masa wlasciwego jedzenia', 0,3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie';
SELECT nazwa, 0.7*waga AS 'masa wlasciwego jedzenia', 0.3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie';
SELECT nazwa, 0.7*waga AS 'masa wlasciwego jedzenia', 0.3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie' GROUP BY nazwa;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM (0.3 * waga) AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie' GROUP BY;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM(0.3 * waga) AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie' GROUP BY;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM(0.3 * waga) AS 'odpadki' FROM zasob WHERE rodzaj='jedzenie' GROUP BY nazwa;
SELECT * FROM zasob WHERE rodzaj=NULL;
SELECT * FROM zasob WHERE rodzaj IS NULL;
SELECT * FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' ORDER BY nazwa DESC;
SELECT nazwa,SUM(waga) AS 'waga', SUM(ilosc) AS 'ilosc' FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' GROUP BY 'nazwa' ORDER BY nazwa DESC;
SELECT nazwa,SUM(waga) AS 'waga', SUM(ilosc) AS 'ilosc' FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' GROUP BY nazwa ORDER BY nazwa DESC;
SHOW TABLES;
DESC Marynarz;
DESC Kreatura;
DESC kreatura;
SELECT * FROM kreatura;
SELECT  AVG(waga) AS 'Srednia waga wikingow' FROM kreatura WHERE rodzaj ='wiking';
SELECT SUM(ilosc)AS 'Ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY Ilosc;
SELECT SUM(ilosc)AS 'Ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj), AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS , AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(YEAR(dataUR)) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(YEAR(dataUR)) AS 'Sredni wiek' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', 2020-ROUND(AVG(YEAR(dataUR))) AS 'Sredni wiek' FROM kreatura GROUP BY rodzaj;
DESC zasob;
SELECT rodzaj, SUM(waga) AS 'waga' FROM zasob GROUP BY rodzaj;
SELECT nazwa, AVG(waga) AS 'waga' GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10; 
SELECT nazwa, AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10;
SELECT nazwa,SUM(ilosc) AS 'ilosc' AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10;
SELECT nazwa,SUM(ilosc) AS 'ilosc', AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10;
SELECT nazwa,SUM(ilosc) AS 'ilosc',SUM(waga) AS 'sumaWag', AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND sumaWag>10;
SELECT nazwa, SUM(ilosc) AS 'ilosc', SUM(waga) AS 'sumaWag', round(AVG(waga)) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND sumaWag>10;
SELECT nazwa, rodzaj, COUNT(nazwa) AS 'ilosc' FROM zasob GROUP BY nazwa HAVING ilosc ;  
SELECT nazwa, COUNT(nazwa) AS 'ilosc' FROM zasob GROUP BY nazwa HAVING ilosc ; 
SELECT rodzaj, COUNT(nazwa) AS 'ilosc' FROM zasob GROUP BY rodzaj HAVING ilosc ;
SELECT rodzaj, COUNT(DISTINCT(nazwa)) AS 'ilosc' FROM zasob GROUP BY rodzaj HAVING ilosc ;
quit
USE churas;
SELECT CONCAT(nazwa,'-' ,rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SHOW tables;
DESC zasob;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '01-01-2000' AND '31-12-2007';  
SELECT * FROM zasob;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31'; 
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa AS 'nazwa', ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY waga;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY ilosc;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' GROUP BY nazwa;
SELECT nazwa, ilosc, ilosc*waga AS "waga" FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31';
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31';
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' ORDER BY DESC;
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' ORDER BY dataPozyskania DESC;
DESC zasob;
SELECT nazwa, 0,7 * waga AS 'masa wlasciwego jedzenia', 0,3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie';
SELECT nazwa, 0,7*waga AS 'masa wlasciwego jedzenia', 0,3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie';
SELECT nazwa, 0.7*waga AS 'masa wlasciwego jedzenia', 0.3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie';
SELECT nazwa, 0.7*waga AS 'masa wlasciwego jedzenia', 0.3 * waga AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie' GROUP BY nazwa;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM (0.3 * waga) AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie' GROUP BY;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM(0.3 * waga) AS 'odpadki'  FROM zasob WHERE rodzaj='jedzenie' GROUP BY;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM(0.3 * waga) AS 'odpadki' FROM zasob WHERE rodzaj='jedzenie' GROUP BY nazwa;
SELECT * FROM zasob WHERE rodzaj=NULL;
SELECT * FROM zasob WHERE rodzaj IS NULL;
SELECT * FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' ORDER BY nazwa DESC;
SELECT nazwa,SUM(waga) AS 'waga', SUM(ilosc) AS 'ilosc' FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' GROUP BY 'nazwa' ORDER BY nazwa DESC;
SELECT nazwa,SUM(waga) AS 'waga', SUM(ilosc) AS 'ilosc' FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' GROUP BY nazwa ORDER BY nazwa DESC;
SHOW TABLES;
DESC Marynarz;
DESC Kreatura;
DESC kreatura;
SELECT * FROM kreatura;
SELECT  AVG(waga) AS 'Srednia waga wikingow' FROM kreatura WHERE rodzaj ='wiking';
SELECT SUM(ilosc)AS 'Ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY Ilosc;
SELECT SUM(ilosc)AS 'Ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj), AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS , AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(YEAR(dataUR)) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(YEAR(dataUR)) AS 'Sredni wiek' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', 2020-ROUND(AVG(YEAR(dataUR))) AS 'Sredni wiek' FROM kreatura GROUP BY rodzaj;
DESC zasob;
SELECT rodzaj, SUM(waga) AS 'waga' FROM zasob GROUP BY rodzaj;
SELECT nazwa, AVG(waga) AS 'waga' GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10; 
SELECT nazwa, AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10;
SELECT nazwa,SUM(ilosc) AS 'ilosc' AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10;
SELECT nazwa,SUM(ilosc) AS 'ilosc', AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND Sum(waga)>10;
SELECT nazwa,SUM(ilosc) AS 'ilosc',SUM(waga) AS 'sumaWag', AVG(waga) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND sumaWag>10;
SELECT nazwa, SUM(ilosc) AS 'ilosc', SUM(waga) AS 'sumaWag', round(AVG(waga)) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND sumaWag>10;
SELECT nazwa, rodzaj, COUNT(nazwa) AS 'ilosc' FROM zasob GROUP BY nazwa HAVING ilosc ;  
SELECT nazwa, COUNT(nazwa) AS 'ilosc' FROM zasob GROUP BY nazwa HAVING ilosc ; 
SELECT rodzaj, COUNT(nazwa) AS 'ilosc' FROM zasob GROUP BY rodzaj HAVING ilosc ;
SELECT rodzaj, COUNT(DISTINCT(nazwa)) AS 'ilosc' FROM zasob GROUP BY rodzaj HAVING ilosc ;
quit
USE churas;
SHOW TABLES;
DESC kreatura;
DESC zasob;
DESC walizka;
SELECT kreatura.nazwa zasob.ilosc FROM kreatura, zasob;
SELECT kreatura.nazwa, zasob.ilosc FROM kreatura, zasob;
DESC ekwipunek;
SELECT kreatura.nazwa, zasob.ilosc FROM kreatura, zasob WHERE ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, zasob.ilosc FROM kreatura, zasob  INNER JOIN ekwipunek  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, zasob.ilosc FROM kreatura, zasob  INNER JOIN kreatura ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, zasob.ilosc FROM kreatura, zasob  INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura, zasob  INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura,GROUP BY kreatura.nazwa zasob  INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura GROUP BY kreatura.nazwa zasob  INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura GROUP BY kreatura.nazwa, zasob  INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura, zasob  INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura   INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, SUM(zasob.ilosc) FROM kreatura, zasob   INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT DINSTICT(kreatura.nazwa), SUM(zasob.ilosc) FROM kreatura, zasob   INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT DISTINCT(kreatura.nazwa), SUM(zasob.ilosc) FROM kreatura, zasob   INNER JOIN ekwipunek ON  ekwipunek.idKreatury = ekwipunek.idZasobu;
SELECT kreatura.nazwa, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN kreatura ON kreatura.idKreatury=ekwipunek.idKreatury; 
SELECT kreatura.nazwa, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN kreatuERROR 1066 (42000): Not unique table/alias: 'kreatura'ra ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN kreatura ON kreatura.idKreatury=ekwipunek.idKreatury;
SHOW TABLES;
DESC kreatura;
DESC ekwipunek;
SELECT kreatura.nazwa, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN kreatura ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, kreatura.rodzaj, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN kreatura ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, kreatura.rodzaj, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN patrz ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, kreatura.rodzaj, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN kreatura ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, kreatura.rodzaj, ekwipunek.ilosc FROM kreatura,ekwipunek INNER JOIN ekwipunek ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, kreatura.rodzaj  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT kreatura.nazwa, kreatura.rodzaj, ekwipunek.ilosc  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury;
ERROR 1066 (42000): Not unique table/alias: 'kreatura'
SELECT kreatura.nazwa, kreatura.rodzaj, ekwipunek.ilosc  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT DISTINCT(kreatura.nazwa), kreatura.rodzaj, SUM(ekwipunek.ilosc)  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury;
SELECT DISTINCT(kreatura.nazwa), kreatura.rodzaj, SUM(ekwipunek.ilosc)  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury GROUP BY kreatura.nazwa;
SELECT DISTINCT(kreatura.nazwa), SUM(ekwipunek.ilosc)  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury GROUP BY kreatura.nazwa;
SELECT DISTINCT(kreatura.nazwa), SUM(ekwipunek.ilosc) AS ilosc  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury GROUP BY kreatura.nazwa;
SELECT * FROM ekwipunek;
USE churas;
SELECT DISTINCT(kreatura.nazwa), SUM(ekwipunek.ilosc) AS ilosc  FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury=ekwipunek.idKreatury GROUP BY kreatura.nazwa;
DESC kreatura;
DESC ekwipunek;
DESC zasob;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura,ekwipunek,zasob INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu;  
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura, zasob INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu; 
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu;
SELECT * FROM ekwipunek;
SELECT * FROM zasob;
SELECT kreatura.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury  WHERE kreatura.idKreatury IS NOT = ekwipunek.idKreatury;
SELECT kreatura.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury  WHERE kreatura.idKreatury  NOT = ekwipunek.idKreatury;
SELECT kreatura.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury  WHERE NOT EXISTS (kreatura.idKreatury = ekwipunek.idKreatury);
SELECT kreatura.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury  WHERE NOT EXISTS ( SELECT * FROM ekwipunek kreatura.idKreatury = ekwipunek.idKreatury);
SELECT kreatura.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury  WHERE NOT EXISTS ( SELECT * FROM ekwipunek WHERE kreatura.idKreatury = ekwipunek.idKreatury);
SELECT * FROM kratura;
SELECT * FROM kreatura;
SELECT kreatura.nazwa FROM kreatura  WHERE NOT EXISTS ( SELECT * FROM ekwipunek WHERE kreatura.idKreatury = ekwipunek.idKreatury);
SELECT kreatura.nazwa, zasob.nazwa WHERE kreatura.rodzaj = 'wiking' AND YEAR(kreatura.dataUr) LIKE '7%';  
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND YEAR(kreatura.dataUr) LIKE '7%'; 
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura  WHERE kreatura.rodzaj = 'wiking' AND YEAR(kreatura.dataUr) LIKE '7%';
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND YEAR(kreatura.dataUr) LIKE '7%';
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND YEAR(kreatura.dataUr) LIKE '16%';
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND YEAR(kreatura.dataUr) LIKE '1%';
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND kreatura.dataUr LIKE '16%';
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' HAVING  kreatura.dataUr>= '1601.01.01' AND kreatura.dataUr < '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BEETWEN  '1601.01.01' AND '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  '1601.01.01' AND '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  CAST('1601.01.01') AND CAST('1701-01-01') ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  '1601.01.01' AND '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob WHERE kreatura.rodzaj = 'wiking' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob ;
SELECT nazwa, zasob.nazwa FROM kreatura NATURAL JOIN zasob ;
SELECT kreatura.nazwa FROM kreatura NATURAL JOIN zasob ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura,zasob WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  '1601.01.01' AND '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura NATURAL JOIN ekwipunek NATURAL JOIN zasob  WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  '1601.01.01' AND '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  '1601.01.01' AND '1701-01-01' AND Ekwipunek ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE kreatura.rodzaj = 'wiking' AND  kreatura.dataUr BETWEEN  '1601.01.01' AND '1701-01-01' ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE zasob.rodzaj = 'jedzenie' LIMIT 5 ORDER BY kreatura.dataUr DESC ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE zasob.rodzaj = 'jedzenie'  ORDER BY kreatura.dataUr DESC ;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE zasob.rodzaj = 'jedzenie'  ORDER BY kreatura.dataUr DESC LIMIT 5;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury   WHERE zasob.rodzaj = 'jedzenie'  ORDER BY kreatura.dataUr DESC LIMIT 5;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE zasob.rodzaj = 'jedzenie'  ORDER BY kreatura.dataUr DESC LIMIT 5;
quit
USE churas;
DESC kreatura;
SHOW DATABASES;  
use wikingowie;
SHOW TABLES;
CREATE TABLE churas.kreatura SELECT * FROM wikingowie.kreatura;
DROP churas.kreatura;
DROP TABLE churas.kreatura;
CREATE TABLE churas.kreatura SELECT * FROM wikingowie.kreatura;
CREATE TABLE churas.uczestnicy SELECT * FROM wikingowie.uczestnicy;
CREATE TABLE churas.sektor SELECT * FROM wikingowie.sekto;
CREATE TABLE churas.sektor SELECT * FROM wikingowie.sektor;
CREATE TABLE churas.etapy_wyprawy SELECT * FROM wikingowie.etapy_wyprawy;
CREATE TABLE churas.wyprawa SELECT * FROM wikingowie.wyprawa;
USE churas;
SHOW TABLES;
DESC sektor;
SELECT * FROM sektor;
SELECT * FROM wyprawa;
DESC wyprawa;
DESC kreatura;
DESC uczestnicy;
SELECT kreatura.nazwa FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT DISTINCT(kreatura.nazwa) FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
DESC wyprawa;
DESC ekwipunek;
DESC kreatura;
SELEicy wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.id_idKreatury = ekwipunek.idKreatury WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;  
SELECT DISTINCT(wyprawa.nazwa), SUM(ekwipunek.ilosc) FROM wyprawa INNER JOIN uczestnicy wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.id_idKreatury = ekwipunek.idKreatury WHERE kreatura.idKreatury=uczestnicy.id_uczestnika; 
SELECT DISTINCT(wyprawa.nazwa), SUM(ekwipunek.ilosc) FROM wyprawa INNER JOIN uczestnicy wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.id_idKreatury = ekwipunek.idKreatury WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT DISTINCT(wyprawa.nazwa), SUM(ekwipunek.ilosc) FROM wyprawa INNER JOIN uczestnicy wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT DISTINCT(wyprawa.nazwa), SUM(ekwipunek.ilosc) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON  uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT DISTINCT(wyprawa.nazwa), SUM(ekwipunek.ilosc) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON  uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury GROUP BY wyprawa.nazwa WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT DISTINCT(wyprawa.nazwa), SUM(ekwipunek.ilosc) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON  uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury  WHERE kreatura.idKreatury=uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
SELECT DISTINCT(wyprawa.nazwa), COUT(id.kreatury), GROUP_CONCAT(nazwa.kreatura) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury WHERE kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;  
SELECT DISTINCT(wyprawa.nazwa), COUT(idKreatury), GROUP_CONCAT(nazwa.kreatura) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury WHERE kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa; 
SELECT DISTINCT(wyprawa.nazwa), COUNT(idKreatury), GROUP_CONCAT(nazwa.kreatura) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury WHERE kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
SELECT DISTINCT(wyprawa.nazwa), COUNT(kreatura.idKreatury), GROUP_CONCAT(kreatura.nazwa.kreatura) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury WHERE kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
SELECT DISTINCT(wyprawa.nazwa), COUNT(kreatura.idKreatury), GROUP_CONCAT(kreatura.nazwa) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury WHERE kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
SHOW TABLES;
DESC etapy_wyprawy;
DESC sektor;
DESC wyprawa;
SELECT * FROM etapy_wyprawy
SELECT * FROM etapy_wyprawy;
SELECT etapy_wyprawy.kolejnosc, sektor.nazwa, wyprawa.kierownik INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora ORDER BY ASC wyprawa.data_rozpoczecia, ASC etapy_wyprawy.kolejnosc;  
SELECT etapy_wyprawy.kolejnosc, sektor.nazwa, wyprawa.kierownik FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora ORDER BY ASC wyprawa.data_rozpoczecia, ASC etapy_wyprawy.kolejnosc; 
SELECT etapy_wyprawy.kolejnosc, sektor.nazwa, wyprawa.kierownik FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora ORDER BY wyprawa.data_rozpoczecia ASC, etapy_wyprawy.kolejnosc ASC;
SELECT etapy_wyprawy.kolejnosc, sektor.nazwa, kreatura.nazwa FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora INNER JOIN kreatura ON wyprawa.kierownik = kreatura.idKreatury  ORDER BY wyprawa.data_rozpoczecia ASC, etapy_wyprawy.kolejnosc ASC;
SELECT etapy_wyprawy.kolejnosc, sektor.nazwa AS 'sektor', kreatura.nazwa AS 'kierownik' FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora INNER JOIN kreatura ON wyprawa.kierownik = kreatura.idKreatury  ORDER BY wyprawa.data_rozpoczecia ASC, etapy_wyprawy.kolejnosc ASC;
SELECT etapy_wyprawy.kolejnosc, wyprawa.nazwa , sektor.nazwa AS 'sektor', kreatura.nazwa AS 'kierownik' FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora INNER JOIN kreatura ON wyprawa.kierownik = kreatura.idKreatury  ORDER BY wyprawa.data_rozpoczecia ASC, etapy_wyprawy.kolejnosc ASC;
SELECT etapy_wyprawy.kolejnosc, wyprawa.nazwa , sektor.nazwa AS 'sektor', kreatura.nazwa AS 'kierownik', etapy_wyprawy.dziennik  FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora INNER JOIN kreatura ON wyprawa.kierownik = kreatura.idKreatury  ORDER BY wyprawa.data_rozpoczecia ASC, etapy_wyprawy.kolejnosc ASC;
DESC sektor;
DESC etapy_wyprawy;
SELECT sektor.nazwa,COUT(etapy_wyprawy.sektor) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor;
SELECT sektor.nazwa,COUNT(etapy_wyprawy.sektor) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor;
SELECT DISTINCT(sektor.nazwa),COUNT(etapy_wyprawy.sektor) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor;
SELECT sektor.nazwa,COUNT(etapy_wyprawy.sektor) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa,COUNT(etapy_wyprawy.sektor)) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa,COUNT(etapy_wyprawy.sektor) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa,COUNT(etapy_wyprawy.sektor + IFNULL(0)) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
DESC sektor;
DESC etapy_wyprawy;
SELECT * FROM sektor;
SELECT * FROM etapy_wyprawy;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
quit
USE churas;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL (etapy_wyprawy.sektor,0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT * FROM sektor;
SELECT * FROM wyprawa;
SHOW TABLES;
SELECT * FROM etapy_wyprawa;
SELECT * FROM etapy_wyprawy;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor GROUP BY sektor.nazwa WHERE etapy_wyprawy.sektor=sektor.id_sektora;
SELECT sektor.nazwa,IFNULL(COUNT(etapy_wyprawy.sektor  ),0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora;
SELECT sektor.nazwa,IFNULL(etapy_wyprawy.sektor,0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora;
SELECT sektor.nazwa,IFNULL(count(etapy_wyprawy.sektor,0)) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektoor.nazwa;
SELECT sektor.nazwa,IFNULL(count(etapy_wyprawy.sektor),0)) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektoor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0)) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektoor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektoor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT * FROM etapy_wyprawy;
SELECT sektor.nazwa, sektor.id_sektora IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, sektor.id_sektora, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, DISTINCT(sektor.id_sektora), IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, DISTINCT(sektor.id_sektora) AS 'id', IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, DISTINCT sektor.id_sektora AS 'id', IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, DISTINCT(sektor.id_sektora) AS 'id', IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
DESC sektor;
SELECT DISTINCT(id_sektora) FROM sektor;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT  *  FROM  sektor;
SELECT  *  FROM etapy_wyprawy;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor INNER LEFT etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  LEFT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  RIGHT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  LEFT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, COUNT(etapy_wyprawy.sektor),  AS 'ilosc odzwiedzin' FROM sektor  LEFT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, COUNT(etapy_wyprawy.sektor)  AS 'ilosc odzwiedzin' FROM sektor  LEFT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  LEFT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor  WHERE etapy_wyprawy.sektor=sektor.id_sektora GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  LEFT JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor   GROUP BY sektor.nazwa;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor   GROUP BY sektor.nazwa;
DESC kreatura;
DESC wyprawa;
SHOW TABLES;
DESC uczestnicy;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(COUNT(),"Bral udzial") FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestika;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury),"Bral udzial") FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestika GROUP BY kreatura.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury)>0,"Brala udzial", "NIE BRALA UDZIALU") FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestika GROUP BY kreatura.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury)>0,"Brala udzial", "NIE BRALA UDZIALU") FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY kreatura.nazwa;
SELECT * FROM kreatura;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury)>0,"Brala udzial", "NIE BRALA UDZIALU") FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY kreatura.nazwa;
SELECT * FROM uczestnicy;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury)=0,"Brala udzial", "NIE BRALA UDZIALU") FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY kreatura.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury)>0,"Brala udzial", "NIE BRALA UDZIALU") FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika WHERE kreatura.idKreatury= uczestnicy.id_uczestnika GROUP BY kreatura.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(kreatura.idKreatury)>0,"Brala udzial", "NIE BRALA UDZIALU") AS 'udzial' FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika WHERE kreatura.idKreatury= uczestnicy.id_uczestnika GROUP BY kreatura.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(uczestnicy.id_uczestnika)>0,"Brala udzial", "NIE BRALA UDZIALU") AS 'udzial' FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika WHERE kreatura.idKreatury= uczestnicy.id_uczestnika GROUP BY kreatura.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(uczestnicy.id_uczestnika)>0,"Brala udzial", "NIE BRALA UDZIALU") AS 'udzial' FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika  GROUP BY kreatura.nazwa;
SELECT * FROM wyprawa;
SELECT * FROM etapy_wyprawy;
SELECT wyprawa.nazwa, SUM(LENGHT(etapy_wyprawy.dziennik)) AS 'liczba znakow' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba znakow' >400;  
SELECT LENGHT(dziennik) FROM etapy_wyprawy;
SELECT LENGHT("dziennik") FROM etapy_wyprawy;
SELECT wyprawa.nazwa, SUM(CHAR_LENGHT(etapy_wyprawy.dziennik)) AS 'liczba znakow' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba znakow' >400; 
SELECT wyprawa.nazwa, SUM(LENGHT(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba'>400;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba'>400;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba'>100;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba'>400;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING 'liczba'>100;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa ;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING liczba>100;
DESC kreatura;
DESC ekwipunek;
DESC zasob;
DESC wyprawa;
DESC uczestnicyl
DESC uczestnicy;
SELECT wyprawa.nazwa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatura INNER JOIN ekwipunek ON kreatura.idKreatura = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(kreatura.nazwa)\134SUM(zasob.waga) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(kreatura.nazwa) SUM(zasob.waga) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(kreatura.nazwa) \134 SUM(zasob.waga) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(kreatura.nazwa \134SUM(zasob.waga) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga) * ekwipunek.ilosc / COUNT(kreatura.nazwa) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(SUM(zasob.waga) * ekwipunek.ilosc / COUNT(kreatura.nazwa)) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga) * ekwipunek.ilosc / COUNT(kreatura.nazwa) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER LEFT ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury  LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury  LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT * FROM uczestnicy;
SELECT wyprawa.nazwa, SUM( COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM( COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatura = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury RIGHT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu WHERE kreatura.idKreatury = uczestnicy.id_uczestnika   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(wyprawa.id_wyprawy) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS 'srednia waga' FROM wyprawa LEFT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy LEFT JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury  LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa COUNT() FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy= uczestnicy.wyprawa_id; 
DESC uczestnicy;
SELECT wyprawa.nazwa, COUNT(id_uczestnika) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy= uczestnicy.wyprawa_id;
SELECT wyprawa.nazwa, COUNT(id_uczestnika) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawa= uczestnicy.id_wyprawy;
SELECT wyprawa.nazwa, COUNT(id_uczestnika) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy= uczestnicy.id_wyprawy;
SELECT wyprawa.nazwa, COUNT(id_uczestnika) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy= uczestnicy.id_wyprawy GRUOP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(id_uczestnika) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy= uczestnicy.id_wyprawy GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(uczestnicy.id_uczestnika) AS 'srednia waga' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury  GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER LEFT ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury LEFT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury LEFT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury RIGHT JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury RIGHT JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika =  ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, (select COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy  GROUP BY wyprawa.nazwa);
SELECT wyprawa.nazwa, (select COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy  GROUP BY wyprawa.nazwa) FROM wyprawa;
SELECT wyprawa.nazwa, (select COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy  GROUP BY wyprawa.nazwa) FROM wyprawa GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, (select COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy  GROUP BY wyprawa.nazwa) FROM wyprawa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(id_uczestnika) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(DISTINCT(id_uczestnika)) AS 'ilosc' FROM wyprawa RIGHT JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu    GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(kreatura.nazwa) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy, INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
USE churas;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT COUNT(DISTINCT(uczestnicy.id_uczestnika)) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
DESC ekwipunek;
SELECT COUNT(DISTINCT(ekwipunek.idEkwipunku)) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   ;
SELECT wyprawa.nazwa, uczestnicy.id_uczestnika AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   ;
SELECT * FROM ekwipunek;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INN
rawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika =
ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INN rawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(*) AS wyprawa FROM wyprawa INN rawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(uczestnicy.id_uczestnika) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(*) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SHOW TABLES;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(DISTINCT(uczestnicy.id_uczestnika)) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(DISTINCT(uczestnicy.id_uczestnika)) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT * FROM wyprawa
SELECT * FROM wyprawa;
SELECT * FROM ekwipunek;
SELECT * FROM uczestnicy;
SELECT * FROM wyprawa;
DESC wyprawa;
DESC kreatura;
SELECT nazwa.kreatura, DATEDIFF(kreatura.dataUR, wyprawa.data_rozpoczecia); 
DESC sektor;
SELECT * FROM sektor;
DESC etapy_wyprawy;
SELECT nazwa.kreatura, DATEDIFF(kreatura.dataUR, wyprawa.data_rozpoczecia) INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika INNER JOIN ;
DESC uczestnicy;
SELECT nazwa.kreatura, DATEDIFF(kreatura.dataUR, wyprawa.data_rozpoczecia) INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika INNER JOIN wyprawa ON uczestnicy.id_wyprawy = wyprawa.id_wyprawy INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora  WHERE sektor.id_sektora = 7;
DESC kreatura
DESC kreatura;
SELECT nazwa.kreatura, DATEDIFF(kreatura.dataUR, wyprawa.data_rozpoczecia) FROM kreatura  INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika INNER JOIN wyprawa ON uczestnicy.id_wyprawy = wyprawa.id_wyprawy INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora  WHERE sektor.id_sektora = 7;
SELECT kreatura.nazwa, DATEDIFF(kreatura.dataUR, wyprawa.data_rozpoczecia) FROM kreatura  INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika INNER JOIN wyprawa ON uczestnicy.id_wyprawy = wyprawa.id_wyprawy INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora  WHERE sektor.id_sektora = 7;
SELECT kreatura.nazwa, DATEDIFF(wyprawa.data_rozpoczecia, kreatura.dataUR) FROM kreatura  INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika INNER JOIN wyprawa ON uczestnicy.id_wyprawy = wyprawa.id_wyprawy INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora  WHERE sektor.id_sektora = 7;
CREATE TRIGGER waga BEFORE UPDATE ON, INSTERT ON kreatura FOR EACH ROW IFkreatura.waga >0; 
CREATE TRIGGER waga BEFORE UPDATE ON, INSTERT ON kreatura FOR EACH ROW IF kreatura.waga >0;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW IF kreatura.waga >0;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW BEGIN IF kreatura.waga >0;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW BEGIN IF kreatura.waga >0 SET kreatura.waga  ;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW BEGIN IF kreatura.waga >0 SET kreatura.waga END ;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW BEGIN IF nowa.waga >0 SET nowa.waga ;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW  IF NEW.waga >0 THEN SET NEW.waga ;
CREATE TRIGGER waga BEFORE UPDATE ON  kreatura FOR EACH ROW  IF NEW.waga >0 THEN SET NEW.waga=0 ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSTERT ON  kreatura FOR EACH ROW  END IF NEW.waga >0 THEN SET NEW.waga ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSTERT ON  kreatura FOR EACH ROW  END IF NEW.waga >0 THEN SET NEW.waga=0 ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSTERT ON  kreatura FOR EACH ROW  END IF NEW.waga >0 THEN SET NEW.waga ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSTERT ON  kreatura FOR EACH ROW IF NEW.waga >0 THEN SET NEW.waga ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0 THEN SET NEW.waga ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0  ;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0  THEN SET NEW.waga =0; END IF;
delimeter //
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0  THEN SET NEW.waga =0; END IF;
delimeter // CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0  THEN SET NEW.waga =0;
delimeter //
delimeter // CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0  THEN SET NEW.waga =0; END IF; //
delimeter // delimeter // CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0  THEN SET NEW.waga =0;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF NEW.waga >0
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0)
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0);
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0) SET NEW.waga =1;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0) THEN SET NEW.waga =1;
delimeter//
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0) THEN SET NEW.waga =1;
delimeter// CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0) THEN SET NEW.waga =1;
delimeter// CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (OLD.waga >0) THEN SET NEW.waga =1;
delimeter// CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0) THEN SET NEW.waga =1;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga >0) THEN SET NEW.waga =1;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga <0) THEN SET NEW.waga =1;
delimeter//
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga <0) THEN SET NEW.waga =1;
delimeter// CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga <0) THEN SET NEW.waga =1;
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga <0) THEN SET NEW.waga =1;
Delimeter $$
CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga <0) THEN SET NEW.waga =1;
Delimeter $$ CREATE TRIGGER sprawdzaniewagi BEFORE INSERT ON  kreatura FOR EACH ROW IF (NEW.waga <0) THEN SET NEW.waga =1;
DELIMITER $$
CREATE TRIGGER sprawdzaniewagi
BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
IF (NEW.waga <0) THEN SET NEW.waga =1;
END IF;
END$$
CREATE TRIGGER sprawdzaniewagi  BEFORE INSERT ON kreatura  FOR EACH ROW  BEGIN  IF (NEW.waga <0) THEN SET NEW.waga =1;  END IF;  END$$
SHOW TRIGGERS;
SHOW TRIGGERS ;
SHOW TRIGGGERS FROM kreatura;
SHOW TABLES;
END $$
SHOW TABLES;
IF (NEW.waga <0) THEN SET NEW.waga =1;
quit
USE churas;
quit



