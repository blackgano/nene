
CREATE TABLE postac (id_postaci INT PRIMARY KEY AUTO_INCREMENT,nazwa VARCHAR(40),rodzaj ENUM('wiking','ptak','kobieta'),data_ur DATE,wiek  INT UNSIGNED);
INSERT INTO `postac` VALUES (1,'Bjorn','wiking','700-08-20','20');
INSERT INTO `postac` VALUES (2,'Drozd','ptak','2018-05-15','5');
INSERT INTO `postac` VALUES (3,'Tesciowa','kobieta','1950-02-2','70');
update postac set data_ur ='1932-02-02' , wiek='88' where id_postaci = 3;
CREATE TABLE walizka (id_walizki int PRIMARY KEY AUTO_INCREMENT,pojemnosc INT UNSIGNED,kolor ENUM('rozowy','czerwony','teczowy','zolty'),id_wlasciciela int, FOREIGN KEY(id_wlasciciela)REFERENCES postac(id_postaci) ON DELETE CASCADE);
ALTER TABLE `walizka` ALTER `kolor` SET DEFAULT 'rozowy';
INSERT INTO `walizka` VALUES (1,20,'czerwony',1);
INSERT INTO `walizka` VALUES (2,15,'zolty',3);
CREATE TABLE izba(adres_budynku int ,nazwa_izby varchar(40), metraz int UNSIGNED, wlasciciel int, FOREIGN KEY(wlasciciel) REFERENCES postac(id_postaci), primary key(adres_budynku, nazwa_izby));
ALTER TABLE izba ADD kolor varchar(20) DEFAULT 'czarny' AFTER metraz;
ALTER TABLE postac RENAME COLUMN funckja TO funkcja ;
UPDATE postac SET funkcja='kapitan' WHERE id_postaci=1;
ALTER TABLE postac ADD COLUMN statek VARCHAR(20), ADD FOREIGN KEY (statek) REFERENCES statek(nazwa_statku) ;
UPDATE postac SET statek='drakar' WHERE id_postaci= 1 OR 2 OR 7 OR 8;
UPDATE postac SET statek='knar' WHERE id_postaci= 4 OR 5 OR 6 ;
UPDATE  izba SET wlasciciel= NULL WHERE metraz=25;
DELETE FROM izba WHERE metraz=25;
DELETE FROM postac WHERE wiek=85 OR 75;
INSERT INTO postac VALUES (1,'Bjorn','wiking','700-08-20',20,'kapitan','drakar');
INSERT INTO postac VALUES (2,'Drozd','ptak','720-06-22',5,NULL,'drakar');
INSERT INTO postac VALUES (3,'Tesciowa','kobieta','680-01-12',88,NULL,NULL);
INSERT INTO postac VALUES (4,'Olaf','wiking','720-06-5',65,NULL,'drakar');
INSERT INTO postac VALUES (5,'Brolaf','wiking','715-02-23',45,NULL,'drakar');
INSERT INTO postac VALUES (6,'ULFUR','wiking','725-03-16',35,NULL,'knar');
INSERT INTO postac VALUES (7,'HYDYR','wiking','730-07-6',23,NULL,'knar');
INSERT INTO postac VALUES (8,'Thor','wiking','732-06-26',70,NULL,'knar');
ALTER TABLE postac DROP FOREIGN KEY statek;
ALTER TABLE postac DROP FOREIGN KEY przetwory_ibfk_1;
ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_2;
ALTER TABLE statek DROP FOREIGN KEY statek_ibfk_1;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
ALTER TABLE walizka DROP FOREIGN KEY walizka_ibfk_1;
ALTER TABLE postac DROP PRIMARY KEY,CHANGE id_postaci id_postaci int;
ALTER TABLE postac ADD pesel varchar(11) ;
ALTER TABLE postac ADD PRIMARY KEY (pesel) ;
UPDATE postac SET pesel='35646575312' WHERE id_postaci=1;
UPDATE postac SET pesel='65476545364' WHERE id_postaci=2;
UPDATE postac SET pesel='65454334523' WHERE id_postaci=3;
UPDATE postac SET pesel='65454336544' WHERE id_postaci=5;
UPDATE postac SET pesel='65454336764' WHERE id_postaci=6;
UPDATE postac SET pesel='65454334577' WHERE id_postaci=7;
ALTER TABLE postac CHANGE rodzaj rodzaj enum('wiking','ptak','kobieta','syrena');
ALTER TABLE postac DROP id_postaci;
INSERT INTO postac VALUES('Gertruda Nieszczera','syrena','700-05-03',200,null,null,89057687623);
UPDATE postac SET statek='drakar' WHERE nazwa='%a%';
UPDATE statek SET max_ladownosc= max_ladownosc * 0.7 WHERE data_wodowania >='2000-01-1';
uc;
SELECT * FROM postac WHERE wiek<1000;
ALTER TABLE postac MODIFY COLUMN rodzaj ENUM('ptak','waz','wiking','kobieta','syrena');
INSERT INTO postac VALUES('Loko','waz','500-3-2',400,NULL,NULL,43267867512);
CREATE TABLE Marynarz LIKE postac;
INSERT INTO Marynarz SELECT * FROM postac WHERE statek IS NOT NULL;
UPDATE Marynarz SET statek=NULL WHERE statek IS NOT NULL;
DELETE FROM Marynarz WHERE nazwa='Brolaf';
DROP TABLE statek;
CREATE TABLE zwierz(id INT PRIMARY KEY AUTO_INCREMENT, nazwa VARCHAR(50),wiek INT);
INSERT INTO zwierz(nazwa,wiek) SELECT nazwa,wiek  FROM postac WHERE rodzaj='ptak' OR rodzaj='waz';
SELETCT * FROM zwierz;); 
CREATE TABLE churas.kreatura LIKE wikingowie.kreatura;
INSERT INTO postac.kreatura SELECT * FROM wikingowie.kreatura;
CREATE TABLE churas.zasob LIKE wikingowie.zasob;
CREATE TABLE churas.ekwipunek LIKE wikingowie.ekwipunek;
INSERT INTO churas.kreatura SELECT * FROM wikingowie.kreatura;
INSERT INTO churas.zasob SELECT * FROM wikingowie.zasob;
INSERT INTO churas.ekwipunek SELECT * FROM wikingowie.ekwipunek;
SELECT * FROM zasob WHERE rodzaj='jedzenie';
SELECT zasob.idZasobu,zasob.ilosc,ekwipunek.idKreatury FROM zasob,ekwipunek WHERE ekwipunek.idKREATURY in(1,3,5) AND ekwipunek.idZasobu=zasob.idZasobu;
SELECT * FROM kreatura WHERE udzwig>=50 AND rodzaj =!'wiedzma';
SELECT * FROM kreatura WHERE nazwa LIKE '%or%' AND udzwig BETWEEN 30 AND 70;
SELECT * FROM zasob WHERE month(dataPozyskania) IN(7,8) ;
SELECT * FROM zasob WHERE rodzaj IS NOT NULL ORDER BY waga ASC;
SELECT * FROM kreatura  ORDER BY dataUr ASC LIMIT 5;
SELECT  rodzaj FROM zasob GROUP BY (rodzaj);
SELECT CONCAT(nazwa,'-' ,rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' ORDER BY dataPozyskania DESC;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM(0.3 * waga) AS 'odpadki' FROM zasob WHERE rodzaj='jedzenie' GROUP BY nazwa;
SELECT * FROM zasob WHERE rodzaj IS NULL;
SELECT * FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' ORDER BY nazwa DESC;
SELECT nazwa,SUM(waga) AS 'waga', SUM(ilosc) AS 'ilosc' FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' GROUP BY nazwa ORDER BY nazwa DESC;
SELECT  AVG(waga) AS 'Srednia waga wikingow' FROM kreatura WHERE rodzaj ='wiking';
SELECT SUM(ilosc)AS 'Ilosc', AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, AVG(waga) AS 'Srednia waga' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj,COUNT(rodzaj) AS 'ilosc', AVG(YEAR(dataUR)) AS 'Sredni wiek' FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, SUM(waga) AS 'waga' FROM zasob GROUP BY rodzaj;
SELECT nazwa, SUM(ilosc) AS 'ilosc', SUM(waga) AS 'sumaWag', round(AVG(waga)) AS 'waga' FROM zasob GROUP BY nazwa HAVING ilosc>=4 AND sumaWag>10;
SELECT rodzaj, COUNT(DISTINCT(nazwa)) AS 'ilosc' FROM zasob GROUP BY rodzaj HAVING ilosc ;
SELECT CONCAT(nazwa,'-' ,rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT nazwa, ilosc, ilosc*waga AS "waga",dataPozyskania FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31' ORDER BY dataPozyskania DESC;
SELECT nazwa,SUM( 0.7*waga) AS 'masa wlasciwego jedzenia', SUM(0.3 * waga) AS 'odpadki' FROM zasob WHERE rodzaj='jedzenie' GROUP BY nazwa;
SELECT nazwa,SUM(waga) AS 'waga', SUM(ilosc) AS 'ilosc' FROM zasob WHERE nazwa LIKE 'Ba%' or '%os' GROUP BY nazwa ORDER BY nazwa DESC;
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu;
SELECT kreatura.nazwa FROM kreatura  WHERE NOT EXISTS ( SELECT * FROM ekwipunek WHERE kreatura.idKreatury = ekwipunek.idKreatury);
SELECT kreatura.nazwa, zasob.nazwa FROM kreatura INNER JOIN ekwipunek  ON kreatura.idKreatury = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu  WHERE zasob.rodzaj = 'jedzenie'  ORDER BY kreatura.dataUr DESC LIMIT 5;
CREATE TABLE churas.kreatura SELECT * FROM wikingowie.kreatura;
DROP TABLE churas.kreatura;
CREATE TABLE churas.kreatura SELECT * FROM wikingowie.kreatura;
CREATE TABLE churas.uczestnicy SELECT * FROM wikingowie.uczestnicy;
CREATE TABLE churas.sektor SELECT * FROM wikingowie.sektor;
CREATE TABLE churas.etapy_wyprawy SELECT * FROM wikingowie.etapy_wyprawy;
CREATE TABLE churas.wyprawa SELECT * FROM wikingowie.wyprawa;
SELECT DISTINCT(kreatura.nazwa) FROM kreatura INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika WHERE kreatura.idKreatury=uczestnicy.id_uczestnika;
SELECT DISTINCT(wyprawa.nazwa), COUNT(kreatura.idKreatury), GROUP_CONCAT(kreatura.nazwa) FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN kreatura ON uczestnicy.id_uczestnika = kreatura.idKreatury WHERE kreatura.idKreatury = uczestnicy.id_uczestnika GROUP BY wyprawa.nazwa;
SELECT etapy_wyprawy.kolejnosc, wyprawa.nazwa , sektor.nazwa AS 'sektor', kreatura.nazwa AS 'kierownik', etapy_wyprawy.dziennik  FROM etapy_wyprawy INNER JOIN wyprawa ON etapy_wyprawy.idWyprawy = wyprawa.id_wyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora INNER JOIN kreatura ON wyprawa.kierownik = kreatura.idKreatury  ORDER BY wyprawa.data_rozpoczecia ASC, etapy_wyprawy.kolejnosc ASC;
SELECT sektor.nazwa, IFNULL(COUNT(etapy_wyprawy.sektor), 0) AS 'ilosc odzwiedzin' FROM sektor  INNER JOIN etapy_wyprawy ON sektor.id_sektora= etapy_wyprawy.sektor   GROUP BY sektor.nazwa;
SELECT kreatura.nazwa AS 'Nazwa kreatury', IF(count(uczestnicy.id_uczestnika)>0,"Brala udzial", "NIE BRALA UDZIALU") AS 'udzial' FROM kreatura LEFT JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika  GROUP BY kreatura.nazwa;
SELECT wyprawa.nazwa, SUM(LENGTH(etapy_wyprawy.dziennik)) AS 'liczba' FROM wyprawa INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy GROUP BY wyprawa.nazwa HAVING liczba>100;
SELECT wyprawa.nazwa, uczestnicy.id_uczestnika AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   ;
SELECT wyprawa.nazwa, SUM(zasob.waga * ekwipunek.ilosc) / COUNT(DISTINCT(uczestnicy.id_uczestnika)) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT wyprawa.nazwa,  COUNT(DISTINCT(uczestnicy.id_uczestnika)) AS wyprawa FROM wyprawa INNER JOIN uczestnicy ON wyprawa.id_wyprawy = uczestnicy.id_wyprawy INNER JOIN ekwipunek ON uczestnicy.id_uczestnika = ekwipunek.idKreatury INNER JOIN zasob ON ekwipunek.idZasobu = zasob.idZasobu   GROUP BY wyprawa.nazwa;
SELECT kreatura.nazwa, DATEDIFF(wyprawa.data_rozpoczecia, kreatura.dataUR) FROM kreatura  INNER JOIN uczestnicy ON kreatura.idKreatury = uczestnicy.id_uczestnika INNER JOIN wyprawa ON uczestnicy.id_wyprawy = wyprawa.id_wyprawy INNER JOIN etapy_wyprawy ON wyprawa.id_wyprawy = etapy_wyprawy.idWyprawy INNER JOIN sektor ON etapy_wyprawy.sektor = sektor.id_sektora  WHERE sektor.id_sektora = 7;
ga =1;
DELIMITER $$
CREATE TRIGGER sprawdzaniewagi
BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
IF (NEW.waga <0) THEN SET NEW.waga =1;
END IF;
END$$


